setwd("..")
install('phenesse')
?weib_percentile
?weib_percentile
setwd('./phenesse')
document
document()
setwd('..')
install("phenesse")
.rs.restartR()
install("phenesse")
cat_function()
weib_percentile(observations = observations)
?weib_percentile
install_github("mbelitz/phenesse")
install_github("phenesse", "mbelitz")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
library(devtools)
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install("phenesse")
setwd("..")
install("phenesse")
phenesse::weib_percentile(observations = c(250,225,212,220,210,202,230,250), iterations = 10)
library(devtools)
install_github("mbelitz/phenesse")
phenesse::weib_percentile(observations = c(250,225,212,220,210,202,230,250), iterations = 10)
observations = c(250,225,212,220,210,202,230,250)
boot::boot(observations, mean, R = bootstraps)
boot::boot(observations, mean, R = 250)
weibfun <- function(data, i){
d <- data[i]
return(mean(d))
}
boot::boot(observations, weibfun, R = 250)
bootstrap <- boot::boot(observations, weibfun, R = 250)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
boot_ci$bca
boot_ci$bca[0]
boot_ci$bca[1]
bootstrap$t0
mean(observations)
boot_ci
boot_ci$bca
plot(boot_ci)
plot(bootstrap)
observations <- c(1662, 1638, 1631, 1628, 1628, 1611, 1607, 1602, 1601, 1598)
weib_percentile(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(percentile_bound(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot::boot_ci$bca[4]
high_ci <- boot::boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot::boot_ci$bca[4]
high_ci <- boot::boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 20, percentile = 0.9, bootstraps = 10)
?boot_ci
?boot.ci
setwd("./phenesse")
document()
??document
document()
document()
document()
library(devtools)
library(roxygen2)
document()
search()
document()
document()
document()
library(boot    )
observations <- c(1662, 1638, 1631, 1628, 1628, 1611, 1607, 1602, 1601, 1598)
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
bootstrap <- boot::boot(observations, quantilefun, R = 100000)
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bootstrap <- boot::boot(observations, quantilefun, R = 100000)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'bca')
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'perc')
boot_ci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "bca")
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "perc")
observations
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "bca")
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "perc")
quantilefun()
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bs <- boot(observations,quantilefun, R = 10000)
bs
bsci <- boot.ci(bs, conf = 0.95, type = "all")
bsci
bsci <- boot.ci(bs, conf = 0.95, type = "bca")
bsci
bsci <- boot.ci(bs, conf = 0.95, type = "perc")
bsci
bsci$t0
bsci$percent
bsci$percent[4]
bsci$percent[5]
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci(observations, percentile = 0.1, type = "perc")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$t[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$type[4]
high_ci <- boot_ci$type[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = "bca")
?grepl
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
txt <- "'adfiaf'"
txt
txt <- "a test of capitalizing"
gsub("""", "", txt)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = bca){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'type')
low_ci <- boot_ci$type[4]
high_ci <- boot_ci$type[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = bca)
bsci[4]
bsci[4][4]
bsci$4[4]
bsci$4
bsci["percent"]
a <- bsci["percent"]
a[4]
a
a$percent[4]
bsci <- boot.ci(bs, type = "all")
bsci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]} else{
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = bca)
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci(observations, percentile = 0.1, type = "perc")
setwd("..")
install("phenesse")
library(devtools)
install("phenesse")
test_p <- c(190,190,193,197,263,208,247,252,200,236)
bootstrap <- boot(test_p, quantilefun, type = "bca")
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bootstrap <- boot(test_p, quantilefun, R = 10000)
bootstrap
boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca")
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = boot.ci (bootstrap, conf = 0.95, type = "perc")
)
?tryCatch
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = "well, shit")
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = print("well, shit"))
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
boot_ci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch(boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
quantile_ci(test_p, percentile = 0.1, type = "bca")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch(boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
quantile_ci(test_p, percentile = 0.1, type = "bca")
boot_ci
boot_ci$percent
boot_ci$percent[4]
quantile_ci(test_p, percentile = 0.1)
tryCatch(bootssss <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bootssss
bootssss <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bootsss
bootssss <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bots
error = function(err) {
message("Error")
return(NA)
})
})
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
error = function(err{message("Error")return(NA)}))))
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
error = function(err{message("Error")return(NA)})
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
return("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
return("Cool!")
}
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
?try
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- try(boot::boot.ci(bootstrap, conf = 0.95, type = type))
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]} else{
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(test_p, type = "bca", percentile = 0.1)
bootstrap
boot.ci(bootstrap, conf = 0.95, type = "bca")
boot.ci(bootstrap, conf = 0.95, type = "perc")
boot.ci(bootstrap, conf = 0.95, type = "bca")
try(boot.ci(bootstrap, conf = 0.95, type = "bca"))
?tryCatch
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = "FU")
1
e <- simpleError("test error")
## Not run:
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("FU"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
)
test
tryCatch(test <- expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
tryCatch(test <- expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test_y <- c(150,175,185,195,199,200,202,205,215,225,235,245,238,241,250)
as.list(test_p, test_y)
test_list <- as.list(test_p, test_y)
test_list
View(test_list)
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test <-
tryCatch({
expr = boot.ci(bootstrap, conf = 0.95, type = "bca"),
},
error = function(err){
message("Error"),
return(NA)
})
test <-
tryCatch({
boot.ci(bootstrap, conf = 0.95, type = "bca"),
},
error = function(err){
message("Error"),
return(NA)
})
e
e
a
setwd("./phenesse/")
document()
setwd('..')
install(phenesse)
install("phenesse")
