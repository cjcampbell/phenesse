} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
s_cybele <- subset(inat_examples, scientific_name == "Speyeria cybele")
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = x, percentile = 0.1)
quantile(x = x, probs = 0.1)
test_that("quantile_ci calculates the quantile mean it should",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 100,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 100))
})
quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']]
quantile_ci(observations = x, percentile = 0, bootstraps = 100)
quantile_ci(observations = x, percentile = 0)
quantile_ci(observations = x, percentile = 0, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.1, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.5, bootstraps = 100)
quantile(x, probs = 0)
quantile_ci(observations = x, percentile = 0.5, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.9, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.99, bootstraps = 100)
quantile_ci(observations = x, percentile = 1, bootstraps = 100)
quantile_ci(observations = x, percentile = 0, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.01, bootstraps = 100)
quantile_ci(observations = x, percentile = 0.0, bootstraps = 100)
quantile_ci(observations = x, percentile = numeric(0), bootstraps = 100)
quantile_ci(observations = x, percentile = 0, bootstraps = 100)
a = 0
quantile_ci(observations = x, percentile = a, bootstraps = 100)
quantile_ci(observations = x, percentile = c(0.4,0.5), bootstraps = 100)
quantile_ci(observations = x, percentile = c(0, 0.4,0.5), bootstraps = 100)
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
bootstrap <- boot::boot(observations = x, quantilefun, R = 250)
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0.1)))
}
bootstrap <- boot::boot(observations = x, quantilefun, R = 250)
quantile(x, probs = 0)
bootstrap <- boot::boot(observations = x, quantilefun, R = 250)
meanfun <- function(data, i){
d <- data[i]
return(mean(d))
}
bootstrap <- boot::boot(observations = x, meanfun, R = 250)
?boot
mean_ci <- function(observations, bootstraps = 100000,
conf = 0.95, type = 'bca'){
meanfun <- function(data, i){
d <- data[i]
return(mean(d))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, meanfun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
mean_ci(observations = r_hirta$doy , bootstraps = 100) # note low number of
r_hirta <- subset(inat_examples, scientific_name == "Rudbeckia hirta")
mean_ci(observations = r_hirta$doy , bootstraps = 100) # note low number of
s_cybele <- subset(inat_examples, scientific_name == "Speyeria cybele")
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = s_cybele$doy, percentile = 0.0)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = s_cybele$doy, percentile = 0.0)
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
bootstrap <- boot::boot(observations = x, quantilefun, R = 150)
bootstrap <- boot::boot(observations = x, statistic = quantilefun, R = 150)
?boot
bootstrap <- boot::boot(x, statistic = quantilefun, R = 150)
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0)))
}
bootstrap <- boot::boot(x, statistic = quantilefun, R = 150)
bootstrap
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type ='bca'),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
boot_ci <- boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0.5)))
}
bootstrap <- boot::boot(x, statistic = quantilefun, R = 150)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0)))
}
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
ci_df
estimate <- estimate_ci(observations)
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
estimate <- estimate_ci(observations = x)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
View(quantilefun)
bootstrap <- boot::boot(x, quantilefun, R = 250)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = 'bca'),
error = function(e) NA)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(x, percentile = 0.5)
quantile_ci(x, percentile = 0)
quantile_ci(x, percentile = 0, type = "perc")
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']])
test_that("quantile_ci calculates the quantile quantile it should",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 100,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 100))
})
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 100,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 100))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 0))
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5))
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1))
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']]
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = s_cybele$doy, percentile = 0.1)['estimate']
quantile_ci(observations = s_cybele$doy, percentile = 0.1)[['estimate']]
quantile(x, probs = 0.1)
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 0))[['0%']]
quantile(x, probs = 0.1)[['10%']]
quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")
quantile_ci(observations = x,percentile = 0.1, bootstraps = 100, type = "perc")
quantile_ci(observations = x,percentile = 0, bootstraps = 100, type = "perc")
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0))[['0%']]
quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']]
quantile(x = x, probs = 0))[['0%']
quantile(x = x, probs = 0))[['0%']]
quantile(x = x, probs = 0)[['0%']]
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0)[['0%']]
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)
})
expect_equal(quantile_ci(observations = x,percentile = 0,
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)[["100%"]])
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)[['50%']])
test_that("quantile_ci calculates the quantile quantile it should",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0)[['0%']])
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)[['50%']])
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)[["100%"]])
})
test_that("weib_percentile calculates a value that seems probable",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_equal(weib_percentile(x, percentile = 0.5, iterations = 20),
mean(x),
tolerance = 10)
})
goodpractice::gp()
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
s_cybele <- subset(inat_examples, scientific_name == "Speyeria cybele")
g <- goodpractice::gp()
g
document()
devtools::document()
g <- goodpractice::gp()
g
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
# calculate onset, note iterations are much lower than desired for quick
# vignette knit. Increase interations for robust calculations
weib_percentile(observations = s_cybele$doy, percentile = 0, iterations = 20)
#calculate 1st percentile
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0, iterations = 20)
# calculate 50% quantile and CIs
mean_ci(observations = r_hirta$doy, bootstraps = 100)
check*
check()
devtools::check()
test_check("phenesse")
devtools::test()
devtools::test()
weib_percentile(x, percentile = 0.5, iterations = 20)
mean(x)
expect_equal(weib_percentile(x, percentile = 0.5, iterations = 20),
mean(x),
tolerance = 7)
test_check("phenesse")
devtools::check()
library(devtools)
install_github(mbelitz/phenesse)
install_github('mbelitz/phenesse')
phenesse::inat_examples
?inat_data
?mean_ci
?mean
?quantile_ci
?weib_ci
?weib_percentile
?weib_percentile_ci
check()
check()
devtools::release()
spell_check()
install.packages("spelling")
library(spelling)
spell_check()
devtools::release()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
install.packages('devtools')
devtools::build()
library(devtools)
devtools::build()
library(dplyr)
install.packages("tidyverse")
library(dplyr)
devtools::build()
install.packages("fitdistrplus")
devtools::build()
devtools::check()
devtools::check()
devtools::build()
version
devtools::build()
