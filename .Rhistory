library("devtools")
library("roxygen2")
create(phenesse)
create('phenesse')
setwd("./phenesse")
document()
setwd("..")
install("cats")
install("phenesse")
?cat_function
cat_function(love = FALSE)
setwd("./phenesse")
document()
weib_percentile <- function(observations, percentile = 0.9, iterations = 100){
cdf_orig <- function(observations){
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
cdf <- 1 - exp(-(observations/weib$estimate['scale'])^weib$estimate['shape'])
return(cdf)
}
cdf_added <- function(observations){
weib_orig <- cdf_orig(observations)
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
added_vec <- sort(append(observations, values = c(min(observations - 15),
max(observations + 15))), decreasing = FALSE)
cdfadded <- 1 - exp(-(added_vec/weib$estimate['scale'])^weib$estimate['shape'])
return(cdfadded)
}
create_predict_df <- function(observations){
cdf <- cdf_orig(observations)
cdf_addedvec <- cdf_added(observations)
added_vec <- sort(append(observations, values = c(min(observations - 15),
max(observations + 15))), decreasing = FALSE)
cdf_df <- data.frame(x = added_vec, y = cdf_addedvec)
ends <- data.frame(x = c(min(added_vec - 1), max(added_vec+ 1)), y = c(-0.001,1.001))
cdf_df <- rbind(cdf_df, ends)
cdf_df <- cdf_df[order(cdf_df$x, decreasing = FALSE),]
return(cdf_df)
}
get_theta_hat_i <- function(observations, percentile = percentile){
emptyvec <- vector(mode = "numeric", length = length(observations))
for(i in 1:length(observations)){
df1 <- create_predict_df(observations)
sim_vector <- runif(n = length(observations),min = 0, max = 1)
df2 <- data.frame(x = observations, y = sim_vector[i])
emptyvec[i] <-  reconPlots::curve_intersect(df1, df2)$x
}
new_vector <- sort(emptyvec, decreasing = FALSE)
new_df1 <- create_predict_df(new_vector)
new_df2 <- data.frame(x = observations, y = percentile)
theta_hat_i <- reconPlots::curve_intersect(new_df1, new_df2)$x
return(theta_hat_i)
}
theta_hat_df <- data.frame(x = observations, y = percentile)
theta_hat <- reconPlots::curve_intersect(create_predict_df(observations), theta_hat_df)[['x']]
bias <- mean(replicate(n = iterations,
expr = get_theta_hat_i(observations = observations,
percentile = percentile)))
2 * theta_hat - bias
}
observations <- c(1662, 1638, 1631, 1628, 1628, 1611, 1607, 1602, 1601, 1598)
weib_percentile(observations, percentile = 0.9)
document()
setwd("..")
install('phenesse')
?weib_percentile
?weib_percentile
setwd('./phenesse')
document
document()
setwd('..')
install("phenesse")
.rs.restartR()
install("phenesse")
cat_function()
weib_percentile(observations = observations)
?weib_percentile
install_github("mbelitz/phenesse")
install_github("phenesse", "mbelitz")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
library(devtools)
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install("phenesse")
setwd("..")
install("phenesse")
phenesse::weib_percentile(observations = c(250,225,212,220,210,202,230,250), iterations = 10)
library(devtools)
install_github("mbelitz/phenesse")
phenesse::weib_percentile(observations = c(250,225,212,220,210,202,230,250), iterations = 10)
observations = c(250,225,212,220,210,202,230,250)
boot::boot(observations, mean, R = bootstraps)
boot::boot(observations, mean, R = 250)
weibfun <- function(data, i){
d <- data[i]
return(mean(d))
}
boot::boot(observations, weibfun, R = 250)
bootstrap <- boot::boot(observations, weibfun, R = 250)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
boot_ci$bca
boot_ci$bca[0]
boot_ci$bca[1]
bootstrap$t0
mean(observations)
boot_ci
boot_ci$bca
plot(boot_ci)
plot(bootstrap)
observations <- c(1662, 1638, 1631, 1628, 1628, 1611, 1607, 1602, 1601, 1598)
weib_percentile(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(percentile_bound(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot::boot_ci$bca[4]
high_ci <- boot::boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot::boot_ci$bca[4]
high_ci <- boot::boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca")
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations, iterations = 20, percentile = 0.9, bootstraps = 10)
?boot_ci
?boot.ci
setwd("./phenesse")
document()
??document
document()
document()
document()
library(devtools)
library(roxygen2)
document()
search()
document()
document()
document()
