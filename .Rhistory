if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
boot_ci <- boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0.5)))
}
bootstrap <- boot::boot(x, statistic = quantilefun, R = 150)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(0)))
}
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type ='bca')
boot_ci
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
ci_df
estimate <- estimate_ci(observations)
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
estimate <- estimate_ci(observations = x)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type),
error = function(e) NA)
View(quantilefun)
bootstrap <- boot::boot(x, quantilefun, R = 250)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = 'bca'),
error = function(e) NA)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap[['t0']], low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(x, percentile = 0.5)
quantile_ci(x, percentile = 0)
quantile_ci(x, percentile = 0, type = "perc")
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100)[['estimate']])
test_that("quantile_ci calculates the quantile quantile it should",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 100,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 100))
})
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 50,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 50))
expect_equal(quantile_ci(observations = x,percentile = 100,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 100))
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 0))
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5))
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1))
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']]
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = s_cybele$doy, percentile = 0.1)['estimate']
quantile_ci(observations = s_cybele$doy, percentile = 0.1)[['estimate']]
quantile(x, probs = 0.1)
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")[['estimate']],
quantile(x = x, probs = 0))[['0%']]
quantile(x, probs = 0.1)[['10%']]
quantile_ci(observations = x,percentile = 0,
bootstraps = 0, type = "perc")
quantile_ci(observations = x,percentile = 0.1, bootstraps = 100, type = "perc")
quantile_ci(observations = x,percentile = 0, bootstraps = 100, type = "perc")
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0))[['0%']]
quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']]
quantile(x = x, probs = 0))[['0%']
quantile(x = x, probs = 0))[['0%']]
quantile(x = x, probs = 0)[['0%']]
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0)[['0%']]
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)
})
expect_equal(quantile_ci(observations = x,percentile = 0,
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)[["100%"]])
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)[['50%']])
test_that("quantile_ci calculates the quantile quantile it should",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_error(quantile_ci(observations = x,percentile = 0,
bootstraps = 100))
expect_equal(quantile_ci(observations = x,percentile = 0,
bootstraps = 100, type = "perc")[['estimate']],
quantile(x = x, probs = 0)[['0%']])
expect_equal(quantile_ci(observations = x,percentile = 0.5,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 0.5)[['50%']])
expect_equal(quantile_ci(observations = x,percentile = 1,
bootstraps = 100)[['estimate']],
quantile(x = x, probs = 1)[["100%"]])
})
test_that("weib_percentile calculates a value that seems probable",{
x <- rnorm(n = 10, mean = 150, sd = 10)
expect_equal(weib_percentile(x, percentile = 0.5, iterations = 20),
mean(x),
tolerance = 10)
})
goodpractice::gp()
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
s_cybele <- subset(inat_examples, scientific_name == "Speyeria cybele")
g <- goodpractice::gp()
g
document()
devtools::document()
g <- goodpractice::gp()
g
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
# calculate onset, note iterations are much lower than desired for quick
# vignette knit. Increase interations for robust calculations
weib_percentile(observations = s_cybele$doy, percentile = 0, iterations = 20)
#calculate 1st percentile
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0, iterations = 20)
# calculate 50% quantile and CIs
mean_ci(observations = r_hirta$doy, bootstraps = 100)
check*
check()
devtools::check()
test_check("phenesse")
devtools::test()
devtools::test()
weib_percentile(x, percentile = 0.5, iterations = 20)
mean(x)
expect_equal(weib_percentile(x, percentile = 0.5, iterations = 20),
mean(x),
tolerance = 7)
test_check("phenesse")
devtools::check()
library(devtools)
install_github(mbelitz/phenesse)
install_github('mbelitz/phenesse')
phenesse::inat_examples
?inat_data
?mean_ci
?mean
?quantile_ci
?weib_ci
?weib_percentile
?weib_percentile_ci
check()
check()
devtools::release()
spell_check()
install.packages("spelling")
library(spelling)
spell_check()
devtools::release()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
install.packages('devtools')
devtools::build()
library(devtools)
devtools::build()
library(dplyr)
install.packages("tidyverse")
library(dplyr)
devtools::build()
install.packages("fitdistrplus")
devtools::build()
devtools::check()
devtools::check()
devtools::build()
version
devtools::build()
data(inat_examples)
a_syriaca <- subset(inat_examples, scientific_name == "Asclepias syriaca")
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 10)
library(phenese)
library(phenesse)
#' data(inat_examples)
#' a_syriaca <- subset(inat_examples, scientific_name == "Asclepias syriaca")
#' weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 10)
#'
#' # Estimate when 90 percent of individuals of the milkweed species A. syriaca
#' have been observed, using only 100 iterations for quicker processing
#'
#' weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 10)
#' }
#' @export
weib_percentile <- function(observations, percentile = 0.9, iterations = 500){
curve_intersect <- function(curve1, curve2, empirical=TRUE, domain=NULL) {
if (!empirical & missing(domain)) {
stop("'domain' must be provided with non-empirical curves")
}
if (!empirical & (length(domain) != 2 | !is.numeric(domain))) {
stop("'domain' must be a two-value numeric vector, like c(0, 10)")
}
if (empirical) {
# Approximate the functional form of both curves
curve1_f <- stats::approxfun(curve1$x, curve1$y, rule = 2)
curve2_f <- stats::approxfun(curve2$x, curve2$y, rule = 2)
# Calculate the intersection of curve 1 and curve 2 along the x-axis
point_x <- stats::uniroot(function(x) curve1_f(x) - curve2_f(x),
c(min(curve1$x), max(curve1$x)))$root
# Find where point_x is in curve 2
point_y <- curve2_f(point_x)
} else {
# Calculate the intersection of curve 1 and curve 2 along the x-axis
# within the given domain
point_x <- stats::uniroot(function(x) curve1(x) - curve2(x), domain)$root
# Find where point_x is in curve 2
point_y <- curve2(point_x)
}
return(list(x = point_x, y = point_y))
}
create_cdf_ends <- function(observations){
weib <- fitdistrplus::fitdist(observations, distr = "weibull",
method = "mle")
cdf0 <- as.numeric(weib$estimate['scale']*
(-log(1-0.01))^(1/weib$estimate['shape']))
cdf100 <- as.numeric(weib$estimate['scale']*
(-log(1-0.99))^(1/weib$estimate['shape']))
added_vec <- sort(append(observations, values = c(cdf0, cdf100)),
decreasing = FALSE)
cdfadded <- 1 - exp(-(added_vec/weib$estimate['scale'])
^weib$estimate['shape'])
return(added_vec)
}
create_predict_df <- function(observations){
added_vec <- create_cdf_ends(observations)
vec_start <- min(added_vec)
vec_end <- max(added_vec)
new_vec <- seq(from = vec_start, to = vec_end, by = 0.5)
weib <- fitdistrplus::fitdist(observations, distr = "weibull",
method = "mle")
cdfadded <- 1 - exp(-(new_vec/weib$estimate['scale'])
^weib$estimate['shape'])
cdf_df <- data.frame(x = new_vec, y = cdfadded)
ends <- data.frame(x = c(min(added_vec - 1),
max(added_vec+ 1)), y = c(-0.001,1.001))
cdf_df <- rbind(cdf_df, ends)
cdf_df <- cdf_df[order(cdf_df$x, decreasing = FALSE),]
return(cdf_df)
}
get_theta_hat_i <- function(observations, percentile = percentile){
emptyvec <- vector(mode = "numeric", length = length(observations))
for(i in seq_along(observations)){
df1 <- create_predict_df(observations)
sim_vector <- stats::runif(n = length(observations),min = 0, max = 1)
df2 <- data.frame(x = observations, y = sim_vector[i])
emptyvec[i] <- curve_intersect(df1, df2)$x
}
new_vector <- sort(emptyvec, decreasing = FALSE)
new_df1 <- create_predict_df(new_vector)
new_df2 <- data.frame(x = observations, y = percentile)
theta_hat_i <- curve_intersect(new_df1, new_df2)$x
return(theta_hat_i)
}
theta_hat_df <- data.frame(x = observations, y = percentile)
theta_hat <- curve_intersect(create_predict_df(observations),
theta_hat_df)[['x']]
bias <- mean(replicate(n = iterations,
expr = get_theta_hat_i(observations = observations,
percentile = percentile)))
2 * theta_hat - bias
}
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 10)
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 10)
data(inat_examples)
s_cybele <- subset(inat_examples, scientific_name == "Speyeria cybele")
quantile_ci(observations = s_cybele$doy, percentile = 0.1, bootstraps = 100)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(stats::quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = s_cybele$doy, percentile = 0.1, bootstraps = 100)
quantile_ci(observations = s_cybele$doy, percentile = 0.1, bootstraps = 100)
quantile_ci(observations = s_cybele$doy, percentile = 0.1, bootstraps = 100)
r_hirta <- subset(inat_examples, scientific_name == "Rudbeckia hirta")
mean_ci(observations = r_hirta$doy , bootstraps = 100)
mean_ci <- function(observations, bootstraps = 100000,
conf = 0.95, type = 'bca'){
meanfun <- function(data, i){
d <- data[i]
return(mean(d))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, meanfun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = type),
error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
mean_ci(observations = r_hirta$doy , bootstraps = 100)
library(devtools)
check()
build()
release()
check_rhub()
8fc026e6dd6447389c04df2730d5dd57
check_rhub()
release()
check_win_devel()
release()
R.version.string
