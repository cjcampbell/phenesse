return(estimate)
}
estimate <- estimate_ci(observations = observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "multicore",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20)
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = "no",
ncpus = ncpus, cl = cl)
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = ncpus, cl = cl)
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = 20, percentile = 0.5))
}
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = ncpus, cl = cl)
getOption("boot.ncpus", 1L)
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = 1, cl = NULL)
bootstrap
bootstrap$t0
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type), error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20)
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20, type = "perc")
library(devtools)
document()
setwd("..")
install("phenesse")
?mean_ci
?quantile_ci
?weib_percentile
?weib_percentile_ci
library(phenesse)
?quantile_ci
library(devtools)
document()
setwd(..)
setwd(./)
setwd("..")
install("phenesse")
?quantile_ci
library(phenesse)
?quantile_ci
?mean_ci
?weib_percentile
?weib_percentile_ci
?phenesse
??phenesse
?weib
??weib
?quantile
setwd('..')
install(phenesse)
install("phenesse")
library(devtools)
install('phenesse')
install("phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
library(devtools)
check()
setwd("phenesse/")
check()
check()
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
inat_data <- inat_data
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
```{r load_phenesse}
library(phenesse)
inat_data <- inat_data
inat_data <- data(inat_data)
data("inat_examples")
inat_data <- data("inat_examples")
s_cybele <- inat_data %>%
dplyr::filter(scientific_name == "Speyeria cybele")
View(inat_examples)
str(inat_examples)
s_cybele <- subset(inat_data, scientific_name == "Speyeria cybele")
inat_data <- data("inat_examples")
data("inat_examples")
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
library(phenesse)
data("inat_examples")
inat_examples <- data("inat_examples")
inat_examples <- data(inat_examples)
data(inat_examples)
inat_examples
inat_examples <- inat_examples
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(phenesse)
library(dplyr)
library(phenesse)
inat_examples <- inat_examples
s_cybele <- inat_data %>%
dplyr::filter(scientific_name == "Speyeria cybele")
s_cybele <- inat_examples %>%
dplyr::filter(scientific_name == "Speyeria cybele")
weib_percentile(observations = s_cybele$doy, percentile = c(0,0.1,0.5), iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 100)
weib_percentile(observations = s_cybele$doy, percentile = 0.5, iterations = 100)
weib_percentile(observations = s_cybele$doy, percentile = 0.1, iterations = 20)
weib_percentile(observations = s_cybele$doy, percentile = 0.5, iterations = 100)
weib_percentile(observations = s_cybele$doy, percentile = 0.5, iterations = 100)
weib_percentile(observations = s_cybele$doy, percentile = c(0,0.1,0.5), iterations = 100)
all_species <- inat_examples %>%
dplyr::filter(scientific_name == "Speyeria cybele"|scientific_name == "Asclepias syriaca"|
scientific_name = "Rudbeckia hirta"|scientific_name == "Danaus plexippus")
all_species <- inat_examples %>%
dplyr::filter(scientific_name == "Speyeria cybele"|scientific_name == "Asclepias syriaca"|
scientific_name == "Rudbeckia hirta"|scientific_name == "Danaus plexippus")
all_species %>%
group_by(scientific_name) %>%
summarise(onset = quantile_ci(observations = doy, percentile = 0),
tenth = quantile_ci(observations = doy, percentile = 0.1),
fiftieth = quantile_ci(observations = doy, percentile = 0.5))
all_species %>%
group_by(scientific_name) %>%
summarise(onset = quantile_ci(observations = doy, percentile = 0),
tenth = quantile_ci(observations = doy, percentile = 0.1),
fiftieth = quantile_ci(observations = doy, percentile = 0.5))
test <- all_species %>%
group_by(scientific_name) %>%
summarise(onset = quantile_ci(observations = doy, percentile = 0),
tenth = quantile_ci(observations = doy, percentile = 0.1),
fiftieth = quantile_ci(observations = doy, percentile = 0.5))
all_species
test <- all_species %>%
group_by(scientific_name) %>%
summarise(onset = quantile_ci(observations = doy, percentile = 0),
tenth = quantile_ci(observations = doy, percentile = 0.1),
fiftieth = quantile_ci(observations = doy, percentile = 0.5))
quantile_ci(observations = s_cybele$doy, percentile = 0.5)
test <- quantile_ci(observations = s_cybele$doy, percentile = 0.5)
test["50%"]
test["estimate"]
test <- quantile_ci(observations = s_cybele$doy, percentile = 0.5)['estimate']
test
all_species %>%
group_by(scientific_name) %>%
summarise(onset_estimate = quantile_ci(observations = doy, percentile = 0)['estimate'],
onset_lowCI = quantile_ci(observations = doy, percentile = 0)['low_ci'],
onset_highCI = quantile_ci(observations = doy, percentile = 0)['high_ci'],
tenth_estimate = quantile_ci(observations = doy, percentile = 0.1)['estimate'],
tenth_lowCI = quantile_ci(observations = doy, percentile = 0.1)['low_ci'],
tenth_highCI = quantile_ci(observations = doy, percentile = 0.1)['high_ci'],
fiftieth_estimate = quantile_ci(observations = doy, percentile = 0.5)['estimate'],
fiftieth_lowCI = quantile_ci(observations = doy, percentile = 0.5)['low_ci'],
fiftieth_highCI = quantile_ci(observations = doy, percentile = 0.5)['high_ci']
)
quantile_ci(observations = doy, percentile = 0)['estimate']
quantile_ci(observations = s_cybele$doy, percentile = 0)['estimate']
quantile_ci(observations = s_cybele$doy, percentile = 0.1)['estimate']
quantile_ci(observations = s_cybele$doy, percentile = 0)['estimate']
all_species %>%
group_by(scientific_name) %>%
summarise(tenth_estimate = quantile_ci(observations = doy, percentile = 0.1)['estimate'],
tenth_lowCI = quantile_ci(observations = doy, percentile = 0.1)['low_ci'],
tenth_highCI = quantile_ci(observations = doy, percentile = 0.1)['high_ci'],
fiftieth_estimate = quantile_ci(observations = doy, percentile = 0.5)['estimate'],
fiftieth_lowCI = quantile_ci(observations = doy, percentile = 0.5)['low_ci'],
fiftieth_highCI = quantile_ci(observations = doy, percentile = 0.5)['high_ci']
)
all_species %>%
group_by(scientific_name) %>%
summarise(quantile_ci(observations = doy, percentile = 0.1))
all_species %>%
group_by(scientific_name) %>%
summarise(quantile_ci(observations = doy, percentile = 0.1)['estimate'])
r_hirta <- inat_examples %>%
dplyr::filter(scientific_name == "Rudbeckia hirta")
quantile_ci(observations = r_hirta$doy, percentile = 0.5)
library(phenesse)
library(devtools)
install_github("mbelitz/phenesse")
install_github("mbelitz/phenesse")
library(phenesse)
install_github("mbelitz/phenesse")
library(phenesse)
install_github("mbelitz/phenesse")
source('~/.active-rstudio-document', echo=TRUE)
install_github("mbelitz/phenesse")
library(phenesse)
library(devtools)
document()
install_github("mbelitz/phenesse")
document()
document()
document()
install_github("phenesse")
install_github("mbelitz/phenesse")
library(phenesse)
vignette()
library(devtools)
check()
check()
document()
document()
install_github("mbelitz/phenesse")
document()
document()
install_github("mbelitz/phenesse")
library(phenesse)
document()
document()
setwd('..')
install()
library(devtools)
install()
install()
install('phenesse')
library(phenesse)
check()
setwd('./phenesse/')
check()
library(dplyr)
check()
knitr::opts_chunk$set(
cache = FALSE,
collapse = TRUE,
comment = "#>"
)
library(phenesse)
library(dplyr)
check()
library(dplyr)
s_cybele <- dplyr::filter(data = inat_examples, scientific_name == "Speyeria cybele")
inat_examples <- inat_examples
inat_examples <- inat_examples
library(dplyr)
s_cybele <- dplyr::filter(data = inat_examples, scientific_name == "Speyeria cybele")
inat_examples <- inat_examples
s_cybele <- dplyr::filter(data = inat_examples, scientific_name == "Speyeria cybele")
View(inat_examples)
s_cybele <- dplyr::filter(inat_examples, scientific_name == "Speyeria cybele")
check()
s_cybele <- dplyr::filter(inat_examples, scientific_name == "Speyeria cybele")
r_hirta <- dplyr::filter(data = inat_examples, scientific_name == "Rudbeckia hirta")
r_hirta <- dplyr::filter(inat_examples, scientific_name == "Rudbeckia hirta")
r_hirta <- dplyr::filter(inat_examples, scientific_name == "Rudbeckia hirta")
check()
chec()
check()
check()
check()
vignette()
vignette("phenesse')
vignette("phenesse")
