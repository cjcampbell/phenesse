d <- data[i]
return(quantile(d, probs = c(percentile)))
}
bootstrap <- boot::boot(observations, quantilefun, R = 100000)
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bootstrap <- boot::boot(observations, quantilefun, R = 100000)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'bca')
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'perc')
boot_ci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "bca")
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "perc")
observations
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "bca")
quantile_ci(observations = observations, percentile = .1, conf = 0.95, type = "perc")
quantilefun()
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bs <- boot(observations,quantilefun, R = 10000)
bs
bsci <- boot.ci(bs, conf = 0.95, type = "all")
bsci
bsci <- boot.ci(bs, conf = 0.95, type = "bca")
bsci
bsci <- boot.ci(bs, conf = 0.95, type = "perc")
bsci
bsci$t0
bsci$percent
bsci$percent[4]
bsci$percent[5]
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci(observations, percentile = 0.1, type = "perc")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$t[4]
high_ci <- boot_ci$bca[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = "bca"){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
low_ci <- boot_ci$type[4]
high_ci <- boot_ci$type[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = "bca")
?grepl
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
txt <- "'adfiaf'"
txt
txt <- "a test of capitalizing"
gsub("""", "", txt)
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = bca){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = 'type')
low_ci <- boot_ci$type[4]
high_ci <- boot_ci$type[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = bca)
bsci[4]
bsci[4][4]
bsci$4[4]
bsci$4
bsci["percent"]
a <- bsci["percent"]
a[4]
a
a$percent[4]
bsci <- boot.ci(bs, type = "all")
bsci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = type)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]} else{
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations, percentile = 0.1, type = bca)
quantile_ci(observations, percentile = 0.1, type = "bca")
quantile_ci(observations, percentile = 0.1, type = "perc")
setwd("..")
install("phenesse")
library(devtools)
install("phenesse")
test_p <- c(190,190,193,197,263,208,247,252,200,236)
bootstrap <- boot(test_p, quantilefun, type = "bca")
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(0.1)))
}
bootstrap <- boot(test_p, quantilefun, R = 10000)
bootstrap
boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca")
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = boot.ci (bootstrap, conf = 0.95, type = "perc")
)
?tryCatch
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = "well, shit")
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = print("well, shit"))
tryCatch(boot_ci <- boot.ci (bootstrap, conf = 0.95, type = "bca"),finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
boot_ci
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch(boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
quantile_ci(test_p, percentile = 0.1, type = "bca")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch(boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
quantile_ci(test_p, percentile = 0.1, type = "bca")
boot_ci
boot_ci$percent
boot_ci$percent[4]
quantile_ci(test_p, percentile = 0.1)
tryCatch(bootssss <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bootssss
bootssss <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = print(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bootsss
bootssss <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
bots
error = function(err) {
message("Error")
return(NA)
})
})
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
error = function(err{message("Error")return(NA)}))))
tryCatch(bots <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
error = function(err{message("Error")return(NA)})
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}
boot_ci <- boot::boot.ci(bootstrap, conf = 0.95, type = "bca"),
finally = return(boot.ci (bootstrap, conf = 0.95, type = "perc")))
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
retrun("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
return("Cool!")
}}}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
tryCatch({
boot_ci <- boot.ci(bootstrap, conf = 0.95, type = "bca")
}, error = function(err){
message("Error")
return("Cool!")
}
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
?try
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- try(boot::boot.ci(bootstrap, conf = 0.95, type = type))
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]} else{
low_ci <- boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(test_p, type = "bca", percentile = 0.1)
bootstrap
boot.ci(bootstrap, conf = 0.95, type = "bca")
boot.ci(bootstrap, conf = 0.95, type = "perc")
boot.ci(bootstrap, conf = 0.95, type = "bca")
try(boot.ci(bootstrap, conf = 0.95, type = "bca"))
?tryCatch
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = "FU")
1
e <- simpleError("test error")
## Not run:
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("FU"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc"))
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")
tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return(boot.ci(bootstrap, conf = 0.95, type = "perc")))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
)
test
tryCatch(test <- expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
tryCatch(test <- expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test_y <- c(150,175,185,195,199,200,202,205,215,225,235,245,238,241,250)
as.list(test_p, test_y)
test_list <- as.list(test_p, test_y)
test_list
View(test_list)
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc")
))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = return("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test <- tryCatch(expr = boot.ci(bootstrap, conf = 0.95, type = "bca"), finally = print("Data gives infinite estimated adjusment 'w' using type = 'bca', considering using type perc"))
test <-
tryCatch({
expr = boot.ci(bootstrap, conf = 0.95, type = "bca"),
},
error = function(err){
message("Error"),
return(NA)
})
test <-
tryCatch({
boot.ci(bootstrap, conf = 0.95, type = "bca"),
},
error = function(err){
message("Error"),
return(NA)
})
e
e
a
setwd("./phenesse/")
document()
setwd('..')
install(phenesse)
install("phenesse")
testobs <- c(150,160,162,164,168,170,172,176,178,188)
weib_percentile <- function(observations, percentile = 0.9, iterations = 100){
cdf_orig <- function(observations){
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
cdf <- 1 - exp(-(observations/weib$estimate['scale'])^weib$estimate['shape'])
return(cdf)
}
cdf_added <- function(observations){
weib_orig <- cdf_orig(observations)
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
added_vec <- sort(append(observations, values = c(min(observations - 15),
max(observations + 15))), decreasing = FALSE)
cdfadded <- 1 - exp(-(added_vec/weib$estimate['scale'])^weib$estimate['shape'])
return(cdfadded)
}
create_predict_df <- function(observations){
cdf <- cdf_orig(observations)
cdf_addedvec <- cdf_added(observations)
added_vec <- sort(append(observations, values = c(min(observations - 15),
max(observations + 15))), decreasing = FALSE)
cdf_df <- data.frame(x = added_vec, y = cdf_addedvec)
ends <- data.frame(x = c(min(added_vec - 1), max(added_vec+ 1)), y = c(-0.001,1.001))
cdf_df <- rbind(cdf_df, ends)
cdf_df <- cdf_df[order(cdf_df$x, decreasing = FALSE),]
return(cdf_df)
}
get_theta_hat_i <- function(observations, percentile = percentile){
emptyvec <- vector(mode = "numeric", length = length(observations))
for(i in 1:length(observations)){
df1 <- create_predict_df(observations)
sim_vector <- runif(n = length(observations),min = 0, max = 1)
df2 <- data.frame(x = observations, y = sim_vector[i])
emptyvec[i] <-  reconPlots::curve_intersect(df1, df2)$x
}
new_vector <- sort(emptyvec, decreasing = FALSE)
new_df1 <- create_predict_df(new_vector)
new_df2 <- data.frame(x = observations, y = percentile)
theta_hat_i <- reconPlots::curve_intersect(new_df1, new_df2)$x
return(theta_hat_i)
}
theta_hat_df <- data.frame(x = observations, y = percentile)
theta_hat <- reconPlots::curve_intersect(create_predict_df(observations), theta_hat_df)[['x']]
bias <- mean(replicate(n = iterations,
expr = get_theta_hat_i(observations = observations,
percentile = percentile)))
2 * theta_hat - bias
}
weib_percentile(observations = testobs, percentile = 0.1, iterations = 100)
weib_percentile <- function(observations, percentile = 0.9, iterations = 100){
curve_intersect <- function(curve1, curve2, empirical=TRUE, domain=NULL) {
if (!empirical & missing(domain)) {
stop("'domain' must be provided with non-empirical curves")
}
if (!empirical & (length(domain) != 2 | !is.numeric(domain))) {
stop("'domain' must be a two-value numeric vector, like c(0, 10)")
}
if (empirical) {
# Approximate the functional form of both curves
curve1_f <- approxfun(curve1$x, curve1$y, rule = 2)
curve2_f <- approxfun(curve2$x, curve2$y, rule = 2)
# Calculate the intersection of curve 1 and curve 2 along the x-axis
point_x <- uniroot(function(x) curve1_f(x) - curve2_f(x),
c(min(curve1$x), max(curve1$x)))$root
# Find where point_x is in curve 2
point_y <- curve2_f(point_x)
} else {
# Calculate the intersection of curve 1 and curve 2 along the x-axis
# within the given domain
point_x <- uniroot(function(x) curve1(x) - curve2(x), domain)$root
# Find where point_x is in curve 2
point_y <- curve2(point_x)
}
return(list(x = point_x, y = point_y))
}
create_cdf_ends <- function(observations){
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
cdf0 <- as.numeric(weib$estimate['scale']*(-log(1-0.01))^(1/weib$estimate['shape']))
cdf100 <- as.numeric(weib$estimate['scale']*(-log(1-0.99))^(1/weib$estimate['shape']))
added_vec <- sort(append(observations, values = c(cdf0, cdf100)), decreasing = FALSE)
cdfadded <- 1 - exp(-(added_vec/weib$estimate['scale'])^weib$estimate['shape'])
return(added_vec)
}
create_predict_df <- function(observations){
added_vec <- create_cdf_ends(observations)
vec_start <- min(added_vec)
vec_end <- max(added_vec)
new_vec <- seq(from = vec_start, to = vec_end, by = 0.5)
weib <- fitdistrplus::fitdist(observations, distr = "weibull", method = "mle")
cdfadded <- 1 - exp(-(new_vec/weib$estimate['scale'])^weib$estimate['shape'])
cdf_df <- data.frame(x = new_vec, y = cdfadded)
ends <- data.frame(x = c(min(added_vec - 1), max(added_vec+ 1)), y = c(-0.001,1.001))
cdf_df <- rbind(cdf_df, ends)
cdf_df <- cdf_df[order(cdf_df$x, decreasing = FALSE),]
return(cdf_df)
}
get_theta_hat_i <- function(observations, percentile = percentile){
emptyvec <- vector(mode = "numeric", length = length(observations))
for(i in 1:length(observations)){
df1 <- create_predict_df(observations)
sim_vector <- runif(n = length(observations),min = 0, max = 1)
df2 <- data.frame(x = observations, y = sim_vector[i])
emptyvec[i] <- curve_intersect(df1, df2)$x
}
new_vector <- sort(emptyvec, decreasing = FALSE)
new_df1 <- create_predict_df(new_vector)
new_df2 <- data.frame(x = observations, y = percentile)
theta_hat_i <- reconPlots::curve_intersect(new_df1, new_df2)$x
return(theta_hat_i)
}
theta_hat_df <- data.frame(x = observations, y = percentile)
theta_hat <- reconPlots::curve_intersect(create_predict_df(observations), theta_hat_df)[['x']]
bias <- mean(replicate(n = iterations,
expr = get_theta_hat_i(observations = observations,
percentile = percentile)))
2 * theta_hat - bias
}
weib_percentile(observations = testobs, percentile = 0.1, iterations = 100)
?stats
