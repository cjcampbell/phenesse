} else{
low_ci <- boot_ci$student[4]
high_ci <- boot_ci$student[5]
}
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- boot_ci$student[4]
high_ci <- boot_ci$student[5]
}
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = type), error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- boot_ci$student[4]
high_ci <- boot_ci$student[5]
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = s_cybele$doy, percentile = 0.1)
quantile_ci(observations = s_cybele$doy, percentile = 0.1, type = "perc")
quantile_ci(observations = s_cybele$doy, percentile = 0.1, type = "norm", bootstraps = 1000)
quantile_ci(observations = s_cybele$doy, percentile = 0.1, type = "basic", bootstraps = 1000)
quantile_ci(observations = s_cybele$doy, percentile = 0.1, type = "stud", bootstraps = 1000)
boot_ci <- boot.ci(bootstrap, type = "perc")
boot_ci <- boot::boot.ci(bootstrap, type = "perc")
boot_ci <- boot::boot.ci(bootstrap, type = "stud")
quantile_ci <- function(observations, percentile, bootstraps = 100000,
conf = 0.95, type = 'bca'){
quantilefun <- function(data, i){
d <- data[i]
return(quantile(d, probs = c(percentile)))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, quantilefun, R = bootstraps)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = 0.95, type = type), error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
quantile_ci(observations = s_cybele$doy, percentile = 0.1, type = "stud", bootstraps = 100)
r_hirta <- subset(inat_examples, scientific_name == "Rudbeckia hirta")
mean_ci(observations = r_hirta$doy)
setwd('./phenesse/')
document()
dev_tools::document()
library(devtools)
document()
mean_ci(observations = r_hirta$doy)
?bootstrap
??bootstrap
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallel = c("no", "multicore", "snow"),
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallel,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
testobs <- c(150,160,162,164,168,170,172,176,178,188)
weib_percentile_ci(observations, iterations = 100, percentile = 0.9, bootstraps = 100)
weib_percentile_ci(observations = testobs, iterations = 100, percentile = 0.9, bootstraps = 100)
a_syriaca <- subset(inat_examples, scientific_name == "Asclepias syriaca")
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 100)
weib_percentile(a_syriaca$doy, percentile = 0.5, iterations = 100)
weib_percentile_ci(observations = s_cybele, iterations = 20, percentile = 0.1, bootstraps = 20)
weib_percentile_ci(observations = s_cybele$doy, iterations = 20, percentile = 0.1, bootstraps = 20)
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
observations = c(120,130,140,150,160,170,175,182,152)
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallel,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations = observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallel = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallel,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
estimate <- estimate_ci(observations = observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
estimate <- estimate_ci(observations = observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "multicore",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20)
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- boot::boot.ci(bootstrap, conf = conf, type = "type")
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = "no",
ncpus = ncpus, cl = cl)
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = ncpus, cl = cl)
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = 20, percentile = 0.5))
}
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = ncpus, cl = cl)
getOption("boot.ncpus", 1L)
bootstrap <- boot::boot(observations, weibfun, R = 20, parallel = "no",
ncpus = 1, cl = NULL)
bootstrap
bootstrap$t0
weib_percentile_ci <- function(observations, iterations, percentile, bootstraps,
type = "bca", conf = 0.95, parallelize = "no",
ncpus = getOption("boot.ncpus", 1L), cl = NULL){
weibfun <- function(data, i){
d <- data[i]
return(phenesse::weib_percentile(d, iterations = iterations, percentile = percentile))
}
estimate_ci <- function(observations){
bootstrap <- boot::boot(observations, weibfun, R = bootstraps, parallel = parallelize,
ncpus = ncpus, cl = cl)
boot_ci <- tryCatch(boot::boot.ci(bootstrap, conf = conf, type = type), error = function(e) NA)
if(type == "bca"){
low_ci <- boot_ci$bca[4]
high_ci <- boot_ci$bca[5]
} else if(type == "perc"){
low_ci <-boot_ci$percent[4]
high_ci <- boot_ci$percent[5]
} else if(type == "norm"){
low_ci <- boot_ci$normal[4]
high_ci <- boot_ci$normal[5]
} else if(type == "basic"){
low_ci <- boot_ci$basic[4]
high_ci <- boot_ci$basic[5]
} else{
low_ci <- "Bootstrap type NA"
high_ci <- "Bootstrap type NA"
}
ci_df <- data.frame(estimate = bootstrap$t0, low_ci, high_ci)
return(ci_df)
}
estimate <- estimate_ci(observations)
return(estimate)
}
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20)
weib_percentile_ci(observations = observations, iterations = 20, percentile = 0.5, bootstraps = 20, type = "perc")
library(devtools)
document()
setwd("..")
install("phenesse")
?mean_ci
?quantile_ci
?weib_percentile
?weib_percentile_ci
library(phenesse)
?quantile_ci
library(devtools)
document()
setwd(..)
setwd(./)
setwd("..")
install("phenesse")
